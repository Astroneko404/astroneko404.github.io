I"/><p>Krumhansl-Schmuckler algorithm is a key finding algorithm based on pitch class distribution, that calculates the correlation between the pitch class distribution array, and each of the 12 major and 12 minor profile weights.</p>

<p>The full Python code could be found on <a href="https://gist.github.com/Astroneko404/1dcde11576e510e964882bbbafaeb050" target="_blank">my GH Gist</a>.</p>

<h2 id="retrieve-pitch-class-distribution-from-midi">Retrieve Pitch Class Distribution from MIDI</h2>
<p>Let’s use the main theme music of Metro-Cross as an example, and it’s MIDI file could be downloaded <a href="http://www5.plala.or.jp/m5ka1/memo/midiroom/mtrcrsr1.zip" target="_blank">here</a>:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/qh2jOHHsQms" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>(Spoiler: It’s in A minor.)</p>

<p>First we use <a href="https://mido.readthedocs.io/en/latest/index.html" target="_blank">mido</a> to read the MIDI file:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">mido</span> <span class="kn">import</span> <span class="n">MidiFile</span>
<span class="n">midi_file</span> <span class="o">=</span> <span class="n">MidiFile</span><span class="p">(</span><span class="s">"[midi]/metro_cross_main.mid"</span><span class="p">)</span></code></pre></figure>

<p>then retrieve the MIDI notes:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">getAllMidiNotes</span><span class="p">(</span><span class="n">mid</span><span class="p">:</span> <span class="n">MidiFile</span><span class="p">):</span>
    <span class="s">"""
    Retrieve midi note information
    :param mid: mido MidiFile
    :return: A list containing all motes with their midi notes number and time
    """</span>
    <span class="n">midi_notes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">mid</span><span class="p">.</span><span class="n">tracks</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">msg</span> <span class="ow">in</span> <span class="n">track</span><span class="p">:</span>
            <span class="n">msg_dict</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="nb">dict</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">msg_dict</span><span class="p">[</span><span class="s">"type"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"note_on"</span> <span class="ow">and</span> <span class="n">msg_dict</span><span class="p">[</span><span class="s">"channel"</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">9</span><span class="p">:</span>  <span class="c1"># Remove the percussion channel
</span>                <span class="n">midi_notes</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">msg_dict</span><span class="p">[</span><span class="s">"note"</span><span class="p">],</span> <span class="n">msg_dict</span><span class="p">[</span><span class="s">"time"</span><span class="p">]])</span>
    <span class="k">return</span> <span class="n">midi_notes</span></code></pre></figure>

<p>Each <code class="language-plaintext highlighter-rouge">msg_dict</code> looks like this:</p>

<figure class="highlight"><pre><code class="language-plaintext" data-lang="plaintext">{'type': 'note_off', 'time': 340, 'note': 48, 'velocity': 80, 'channel': 2}</code></pre></figure>

<p>Remember that the 10th channel is reserved for percussion, so we need to exclude this channel before extracting all notes.</p>

<p>After retrieving all notes, we calculate the pitch class distribution vector:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">getPitchDuration</span><span class="p">(</span><span class="n">note_list</span><span class="p">):</span>
    <span class="s">"""
    Calculate the duration of each pitch class
    :param note_list: The list returned by getAllMidiNotes
    :return: Pitch duration array for Pearson correlation calculation
    """</span>
    <span class="n">pitch_duration</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">12</span><span class="p">)]</span>
    <span class="k">for</span> <span class="n">note</span><span class="p">,</span> <span class="n">length</span> <span class="ow">in</span> <span class="n">note_list</span><span class="p">:</span>
        <span class="n">pitch_duration</span><span class="p">[</span><span class="n">note</span> <span class="o">%</span> <span class="mi">12</span><span class="p">]</span> <span class="o">+=</span> <span class="n">length</span>
    <span class="k">return</span> <span class="n">pitch_duration</span></code></pre></figure>

<h2 id="key-profile-weights">Key-Profile Weights</h2>
<p>There are 5 different key-profile weights available in <a href="https://web.mit.edu/music21/doc/moduleReference/moduleAnalysisDiscrete.html#krumhanslschmuckler" target="_blank">music21</a>: SimpleWeights, AardenEssen, BellmanBudge, KrumhanslSchmuckler, and TemperleyKostkaPayne, and their characteristics are explained in <a href="http://extras.humdrum.org/man/keycor/" target="_blank">keycor manpage</a>:</p>
<blockquote>
  <p>Krumhansl-Kessler:</p>

  <p>Strong tendancy to identify the dominant key as the tonic.</p>

  <p>Aarden-Essen:</p>

  <p>Weak tendancy to identify the subdominant key as the tonic.</p>

  <p>Bellman-Budge:</p>

  <p>No particular tendancies for confusions with neighboring keys.</p>

  <p>Temperley-Kostka-Payne:</p>

  <p>Strong tendancy to identify the relative major as the tonic in minor keys. Well-balanced for major keys.</p>

  <p>Simple:</p>

  <p>Performs most consistently with large regions of music, becomes noiser with smaller regions of music.</p>
</blockquote>

<p>Those key-profile weights could be retrieved using music21:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">a</span> <span class="o">=</span> <span class="n">analysis</span><span class="p">.</span><span class="n">discrete</span><span class="p">.</span><span class="n">KrumhanslSchmuckler</span><span class="p">()</span>
<span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">getWeights</span><span class="p">(</span><span class="s">'major'</span><span class="p">))</span></code></pre></figure>

<p>However, since they are arrays we could define them as global variables:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">KRUMHANSL_SCHMUCKLER_MAJOR</span> <span class="o">=</span> <span class="p">[</span><span class="mf">6.35</span><span class="p">,</span> <span class="mf">2.23</span><span class="p">,</span> <span class="mf">3.48</span><span class="p">,</span> <span class="mf">2.33</span><span class="p">,</span> <span class="mf">4.38</span><span class="p">,</span> <span class="mf">4.09</span><span class="p">,</span> <span class="mf">2.52</span><span class="p">,</span> <span class="mf">5.19</span><span class="p">,</span> <span class="mf">2.39</span><span class="p">,</span> <span class="mf">3.66</span><span class="p">,</span> <span class="mf">2.29</span><span class="p">,</span> <span class="mf">2.88</span><span class="p">]</span>
<span class="n">KRUMHANSL_SCHMUCKLER_MINOR</span> <span class="o">=</span> <span class="p">[</span><span class="mf">6.33</span><span class="p">,</span> <span class="mf">2.68</span><span class="p">,</span> <span class="mf">3.52</span><span class="p">,</span> <span class="mf">5.38</span><span class="p">,</span> <span class="mf">2.6</span><span class="p">,</span> <span class="mf">3.53</span><span class="p">,</span> <span class="mf">2.54</span><span class="p">,</span> <span class="mf">4.75</span><span class="p">,</span> <span class="mf">3.98</span><span class="p">,</span> <span class="mf">2.69</span><span class="p">,</span> <span class="mf">3.34</span><span class="p">,</span> <span class="mf">3.17</span><span class="p">]</span></code></pre></figure>

<p>The original major weights are for C major. In order to get the weights for C# major, we simply shift one element to the right, so the array becomes like this:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="p">[</span><span class="mf">2.88</span><span class="p">,</span> <span class="mf">6.35</span><span class="p">,</span> <span class="mf">2.23</span><span class="p">,</span> <span class="mf">3.48</span><span class="p">,</span> <span class="mf">2.33</span><span class="p">,</span> <span class="mf">4.38</span><span class="p">,</span> <span class="mf">4.09</span><span class="p">,</span> <span class="mf">2.52</span><span class="p">,</span> <span class="mf">5.19</span><span class="p">,</span> <span class="mf">2.39</span><span class="p">,</span> <span class="mf">3.66</span><span class="p">,</span> <span class="mf">2.29</span><span class="p">]</span></code></pre></figure>

<p>Before we use Pearson correlation to calculate the result, let’s define an array that stores the order of different modes so the code part will not be confusing:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">MODE_TABLE</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"C Major"</span><span class="p">,</span> <span class="s">"C Minor"</span><span class="p">,</span> <span class="s">"C# Major"</span><span class="p">,</span> <span class="s">"C# Minor"</span><span class="p">,</span> <span class="s">"D Major"</span><span class="p">,</span> <span class="s">"D Minor"</span><span class="p">,</span> <span class="s">"D# Major"</span><span class="p">,</span> <span class="s">"D# Minor"</span><span class="p">,</span> <span class="s">"E Major"</span><span class="p">,</span>
    <span class="s">"E Minor"</span><span class="p">,</span> <span class="s">"F Major"</span><span class="p">,</span> <span class="s">"F Minor"</span><span class="p">,</span> <span class="s">"F# Major"</span><span class="p">,</span> <span class="s">"F# Minor"</span><span class="p">,</span> <span class="s">"G Major"</span><span class="p">,</span> <span class="s">"G Minor"</span><span class="p">,</span> <span class="s">"G# Major"</span><span class="p">,</span> <span class="s">"G# Minor"</span><span class="p">,</span>
    <span class="s">"A Major"</span><span class="p">,</span> <span class="s">"A Minor"</span><span class="p">,</span> <span class="s">"A# Major"</span><span class="p">,</span> <span class="s">"A# Minor"</span><span class="p">,</span> <span class="s">"B Major"</span><span class="p">,</span> <span class="s">"B Minor"</span>
<span class="p">]</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">DeterminateKey</span><span class="p">(</span><span class="n">midi_file</span><span class="p">):</span>
    <span class="s">"""
    Use weights to perform key determination
    :param midi_file: mido MidiFile
    :return: Pearson correlation result (in list)
    """</span>
    <span class="n">note_length_vector</span> <span class="o">=</span> <span class="n">getPitchDuration</span><span class="p">(</span><span class="n">getAllMidiNotes</span><span class="p">(</span><span class="n">midi_file</span><span class="p">))</span>
    <span class="n">corr_res</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">24</span><span class="p">):</span>
        <span class="n">shift_idx</span> <span class="o">=</span> <span class="mi">12</span> <span class="o">-</span> <span class="n">idx</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="n">weight</span> <span class="o">=</span> <span class="n">KRUMHANSL_SCHMUCKLER_MAJOR</span><span class="p">[</span><span class="n">shift_idx</span><span class="p">:]</span> <span class="o">+</span> \
        <span class="n">KRUMHANSL_SCHMUCKLER_MAJOR</span><span class="p">[:</span><span class="n">shift_idx</span><span class="p">]</span> <span class="k">if</span> <span class="n">idx</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> \
        <span class="n">KRUMHANSL_SCHMUCKLER_MINOR</span><span class="p">[</span><span class="n">shift_idx</span><span class="p">:]</span> <span class="o">+</span> <span class="n">KRUMHANSL_SCHMUCKLER_MINOR</span><span class="p">[:</span><span class="n">shift_idx</span><span class="p">]</span>
        <span class="n">corr_res</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">pearsonCorrelation</span><span class="p">(</span><span class="n">note_length_vector</span><span class="p">,</span> <span class="n">weight</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">corr_res</span></code></pre></figure>

<p>Finally, the index of the maximum value in <code class="language-plaintext highlighter-rouge">corr_res</code> indicates the most likely mode of our MIDI file:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>res = DeterminateKey(midi)
print(MODE_TABLE[argmax(res)])
</code></pre></div></div>

<p>However, the correlation result using Krumhansl-Kessler weights shows that this music is in E major, but as its characteristic mentions, it tends to “identify the dominant key as the tonic”.</p>

<p>Let’s try another set of weights:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BELLMAN_BUDGE_MAJOR = [16.8, 0.86, 12.95, 1.41, 13.49, 11.93, 1.25, 20.28, 1.8, 8.04, 0.62, 10.57]
BELLMAN_BUDGE_MINOR = [18.16, 0.69, 12.99, 13.34, 1.07, 11.15, 1.38, 21.07, 7.49, 1.53, 0.92, 10.21]
</code></pre></div></div>

<p>This time the result shows A minor, which is correct.</p>

<h2 id="limitations">Limitations</h2>
<p>Of course there are other modes besides major and minor:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/3BZm1i4QdcU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>This music is in C <a href="https://en.wikipedia.org/wiki/Dorian_mode" target="_blank">Dorian</a>, but if we use this algorithm and Bellman-Budge weights to calculate its key, the result is G minor.</p>

<p>We could simply find that C Dorian and G natural minor share a same set of notes:</p>

<p><img src="../assets/img/misc/mode.png" alt="" /></p>

<p>Even so, they are two modes that are totally different.</p>

<p>Besides, a song may change its modes several times. Without windowing the inputs, the result may not be precise also.</p>

<h2 id="references">References</h2>
<ul>
  <li><a href="https://web.mit.edu/music21/doc/moduleReference/moduleAnalysisDiscrete.html" target="_blank">https://web.mit.edu/music21/doc/moduleReference/moduleAnalysisDiscrete.html</a></li>
  <li><a href="http://extras.humdrum.org/man/keycor/" target="_blank">http://extras.humdrum.org/man/keycor/</a></li>
</ul>
:ET